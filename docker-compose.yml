services:
  db:
    image: postgres:17
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - transcendence
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    restart: unless-stopped
    # Path of the log file: /var/lib/docker/containers/<container-id>/<container-id>-json.log
    logging:
      driver: "json-file"    # Format of the log files
      options:
        max-size: "10m"      # Rotate when log file reaches 10MB
        max-file: "3"        # Keep only 3 log files
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  django:
    build: ./srcs/django
    container_name: django
    ports:
      - "8000:8000"
    networks:
      - transcendence
    depends_on:
      - db
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: ${DEBUG}
      DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
    volumes:
      - ./srcs/django/django_app:/app
      - static_volume:/app/static
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  nginx:
    image: nginx
    container_name: nginx
    build:
      context: ./srcs/nginx
      dockerfile: Dockerfile
    ports:
      - "443:443"
    networks:
      - transcendence
    restart: unless-stopped
    depends_on:
      - django
    volumes:
      - static_volume:/app/static             #share static files between django and nginx
      - ./srcs/nginx/ssl:/etc/nginx/ssl       #bind mount for ssl certificates
      - ./srcs/nginx/conf.d:/etc/nginx/conf.d #bind mount for nginx configuration
    healthcheck:
      test: "curl -kfsSL https://localhost:443"
      interval: 5s
      timeout: 1s
      retries: 10
      start_period: 5s
#bind mount is a way to mount a directory from the host machine into the container
#it is more secure and easier to manage than using volumes
#it is also faster than volumes
#it is also easier to update the configuration without having to rebuild the image

volumes:
  postgres_data:
  static_volume:

networks:
  transcendence:
    name: transcendence
    driver: bridge
